# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
- telligent12

pool: 
  name: 4 Roads Office
  demands:
  - msbuild
  - visualstudio
  - vstest

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  BuildNumber: '20'
  ProjectName: '4RD-OPS'

stages:
  - stage: Build

    jobs: 
    - job: Build

        steps:
            - checkout: self
            #- checkout: git://4RD-OPS/MyRepo
        
           - task: GitVersion@5
              displayName: GitVersion
              inputs:
                runtime: full

            - powershell: |
               $buildNumber = "$(Build.BuildNumber)"
               $a,$b = $buildNumber.split('\\+')
               
               Write-Host "$(BuildNumber)"
               Write-Host $env:BuildNumber
               
               Write-Host "##vso[build.updatebuildnumber]$(BuildNumber).$(GitVersion.Minor).$(GitVersion.Patch).$b"
               Write-Host "##vso[task.setvariable variable=BuildNumber]$(BuildNumber).$(GitVersion.Minor).$(GitVersion.Patch).$b"
              displayName: Version
              
            - task: NuGetToolInstaller@0
              displayName: 'Use NuGet 4.4.1'
              inputs:
                versionSpec: 4.4.1

            - task: NuGetCommand@2
              displayName: 'NuGet restore'

            - powershell: |
               Write-Host "$(BuildNumber)"
               Write-Host $env:BuildNumber
               
               function Update-SourceVersion   
               {   
                 Param ([string]$Version)   
                 $NewVersion = 'AssemblyVersion("' + $Version + '")';
                 $NewFileVersion = 'AssemblyFileVersion("' + $Version + '")';
               
                 foreach ($o in $input)
                 {   
                   Write-output $o.FullName
                   $TmpFile = $o.FullName + ".tmp"
                    get-content $o.FullName |
                       %{$_ -replace 'AssemblyVersion\("[0-9]+(\.([0-9]+|\*)){1,3}"\)', $NewVersion } |
                       %{$_ -replace 'AssemblyFileVersion\("[0-9]+(\.([0-9]+|\*)){1,3}"\)', $NewFileVersion }  > $TmpFile
                    move-item $TmpFile $o.FullName -force
                 }
               }
               
               function Update-AllAssemblyInfoFiles ( $version )
               {
                 foreach ($file in "GlobalAssemblyInfo.cs", "GlobalAssemblyInfo.vb" )
                 {
                   get-childitem -recurse |? {$_.Name -eq $file} | Update-SourceVersion $version ;
                 }
               }
               Update-AllAssemblyInfoFiles "$(Build.BuildNumber)";
              displayName: 'Update-AllAssemblyInfoFiles'
            - task: VSBuild@1
              inputs:
                solution: '$(solution)'
                msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=false /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)\\" /p:version=$(BuildNumber)'
                platform: '$(buildPlatform)'
                configuration: '$(buildConfiguration)'

            - task: VSTest@2
              displayName: 'Test Assemblies'
              inputs:
                testAssemblyVer2: |
                 **\$(BuildConfiguration)\*test*.dll
                 !**\obj\**

            - task: CopyFiles@2
              inputs:
                sourceFolder: '$(Build.ArtifactStagingDirectory)'
                contents: |
                    $(Build.ArtifactStagingDirectory)/**/PackageTmp/bin/?(*.dll)
                    !$(Build.ArtifactStagingDirectory)/**/PackageTmp/bin/?(Aspose*.dll)
                    !$(Build.ArtifactStagingDirectory)/**/PackageTmp/bin/?(aspNet*.dll)
                    !$(Build.ArtifactStagingDirectory)/**/PackageTmp/bin/?(AdvancedIntellect.Ssl.dll)
                    !$(Build.ArtifactStagingDirectory)/**/PackageTmp/bin/?(Common.Logging*.dll)
                    !$(Build.ArtifactStagingDirectory)/**/PackageTmp/bin/?(CommunityServer*.dll)
                    !$(Build.ArtifactStagingDirectory)/**/PackageTmp/bin/?(DOAP.dll)
                    !$(Build.ArtifactStagingDirectory)/**/PackageTmp/bin/?(dotless.Core.dll)
                    !$(Build.ArtifactStagingDirectory)/**/PackageTmp/bin/?(Jint.dll)
                    !$(Build.ArtifactStagingDirectory)/**/PackageTmp/bin/?(log4net.dll)
                    !$(Build.ArtifactStagingDirectory)/**/PackageTmp/bin/?(Microsoft.AspNet.SignalR*.dll)
                    !$(Build.ArtifactStagingDirectory)/**/PackageTmp/bin/?(Microsoft.IdentityModel*.dll)
                    !$(Build.ArtifactStagingDirectory)/**/PackageTmp/bin/?(Microsoft.Owin*.dll)
                    !$(Build.ArtifactStagingDirectory)/**/PackageTmp/bin/?(Microsoft.Web.Infrastructure.dll)
                    !$(Build.ArtifactStagingDirectory)/**/PackageTmp/bin/?(Moq.dll)
                    !$(Build.ArtifactStagingDirectory)/**/PackageTmp/bin/?(Newtonsoft.Json.dll)
                    !$(Build.ArtifactStagingDirectory)/**/PackageTmp/bin/?(NineRays.Gears.IFilterHelper.dll)
                    !$(Build.ArtifactStagingDirectory)/**/PackageTmp/bin/?(Ninject.dll)
                    !$(Build.ArtifactStagingDirectory)/**/PackageTmp/bin/?(nunit*.dll)
                    !$(Build.ArtifactStagingDirectory)/**/PackageTmp/bin/?(NUnit*.dll)
                    !$(Build.ArtifactStagingDirectory)/**/PackageTmp/bin/?(NVelocity.dll)
                    !$(Build.ArtifactStagingDirectory)/**/PackageTmp/bin/?(Owin.dll)
                    !$(Build.ArtifactStagingDirectory)/**/PackageTmp/bin/?(protobuf-net.dll)
                    !$(Build.ArtifactStagingDirectory)/**/PackageTmp/bin/?(RSS.NET.dll)
                    !$(Build.ArtifactStagingDirectory)/**/PackageTmp/bin/?(Security.Cryptography.dll)
                    !$(Build.ArtifactStagingDirectory)/**/PackageTmp/bin/?(SimpleInjector.dll)
                    !$(Build.ArtifactStagingDirectory)/**/PackageTmp/bin/?(System.Collections.Immutable.dll)
                    !$(Build.ArtifactStagingDirectory)/**/PackageTmp/bin/?(System.Net.Http.Formatting.dll)
                    !$(Build.ArtifactStagingDirectory)/**/PackageTmp/bin/?(Telligent*.dll)
                TargetFolder: '$(ProjectName) $(BuildNumber)'
                flattenFolders: true

            - task: PublishPipelineArtifact@1
              displayName: 'Publish Pipeline Artifact'
              inputs:
                targetPath: '$(ProjectName) $(BuildNumber)'
                artifact: '$(ProjectName) $(BuildNumber)'
